clear all; clc; warning off;

set(0,'defaultLineLineWidth',2) ;   
set(0,'defaultLineMarkerSize',2) ; 
set(0,'DefaultAxesLinewidth',2,'DefaultLineLineWidth',2) ;
set(0,'defaultAxesFontSize',16) ;
set(0,'defaultTextInterpreter','latex') ; 
set(0, 'defaultTextFontSize', 14) ;
set(0, 'defaultAxesTickLabelInterpreter', 'latex') ;
set(0, 'defaultLegendInterpreter', 'latex') ;
set(0, 'defaultLegendFontSize', 14) ;

u_max = 1.5;
Ts = 0.1; 

% data
bag = rosbag('robot_control_2025-02-28-19-42-13.bag');
bagInfo = rosbag('info','robot_control_2025-02-28-19-42-13.bag');
bag_p = rosbag('robot_state_2025-02-28-19-42-13.bag');
bagInfo_p = rosbag('info','robot_state_2025-02-28-19-42-13.bag');

bSel_des = select(bag,'Topic','/cmd_vel/controller/filter_data');
bSel = select(bag,'Topic','/real/cmd_vel');
msgStructs_des = readMessages(bSel_des,'DataFormat','struct');
msgStructs = readMessages(bSel,'DataFormat','struct');
h_value = cellfun(@(m) double(m.H1),msgStructs_des);
% bSel = select(bag,'Topic','/fbc/cmd_vel');
bSel_real = select(bag,'Topic','/cmd_vel/controller/drive');
% bSel_pose = select(bag,'Topic','/vrpn_client_node/flipper/pose');

bSel_pose = select(bag_p,'Topic','/state/pose');

msgStructs_des = readMessages(bSel_des,'DataFormat','struct');
msgStructs = readMessages(bSel,'DataFormat','struct');
msgStructs_real= readMessages(bSel_real,'DataFormat','struct');
msgStructs_pose= readMessages(bSel_pose,'DataFormat','struct');

% pose
x_p = cellfun(@(m) double(m.Pose.Pose.Position.X),msgStructs_pose);
x_p = x_p - x_p(1,1); % we start from 0
y_p = cellfun(@(m) double(m.Pose.Pose.Position.Y),msgStructs_pose);
y_p = y_p - y_p(1,1);
z_p = cellfun(@(m) double(m.Pose.Pose.Position.Z),msgStructs_pose);
z_p = z_p - z_p(1,1);

q_1 = cellfun(@(m) double(m.Pose.Pose.Orientation.X),msgStructs_pose);
q_2 = cellfun(@(m) double(m.Pose.Pose.Orientation.Y),msgStructs_pose);
q_3 = cellfun(@(m) double(m.Pose.Pose.Orientation.Z),msgStructs_pose);
q_4 = cellfun(@(m) double(m.Pose.Pose.Orientation.W),msgStructs_pose);

theta = atan2( 2 .* (q_4 .* q_3 + q_1 .* q_2), 1 - 2 .* (q_2 .* q_2 + q_3 .* q_3)) ;
theta = theta - theta(1,1);

% variances
var_x = cellfun(@(m) double(m.Pose.Covariance(1)), msgStructs_pose);    % variance of x
var_y = cellfun(@(m) double(m.Pose.Covariance(8)), msgStructs_pose);    % variance of y
var_z = cellfun(@(m) double(m.Pose.Covariance(15)), msgStructs_pose);   % variance of z

% velocities
vx_d = cellfun(@(m) double(m.ULinearVelocityBaseline),msgStructs_des); % unsafe velocity
w_d = cellfun(@(m) double(m.UAngularVelocityBaseline),msgStructs_des); % unsafe angular
v_r = cellfun(@(m) double(m.ULinearVelocityFiltered),msgStructs_des); % safe velocity
w_r = cellfun(@(m) double(m.UAngularVelocityFiltered),msgStructs_des); % safe angular vel.
% vx_r = cellfun(@(m) double(m.ULinearVelocityFiltered),msgStructs_des); % safe velocity
% w_r = cellfun(@(m) double(m.UAngularVelocityFiltered),msgStructs_des);

% time_total_s = bSel_pose.EndTime - bSel_pose.StartTime ;
time_total = bSel_des.EndTime - bSel_des.StartTime ;
time_s = zeros(length(x_p),1);
for i = 1:length(x_p) - 1
    time_s(i) = double(msgStructs_pose{i +1, 1}.Header.Stamp.Sec) + 10^-9*double(msgStructs_pose{i + 1, 1}.Header.Stamp.Nsec) ...
        - double(msgStructs_pose{1, 1}.Header.Stamp.Sec) + 10^-9*double(msgStructs_pose{1, 1}.Header.Stamp.Nsec);
    % time_s(i) = msgStructs_pose{i + 1, 1}.Header.Stamp.Sec - msgStructs_pose{i, 1}.Header.Stamp.Sec ;
end
time_s(end) = time_s(end-1)+0.001 ;

time_sn = time_s(1:end) - time_s(1); % to remove the first data set

t = 0:Ts:length(w_r)*Ts-Ts;    

% CBF h(x,y)
alpha_h =  1; 
c = 2 * pi / 6;
b = 0;
a = 0.0;
d = 1; % safety boundary radius
h_values = d^2 - y_p.^2;

% plot CBF function h(x_p, y_p)
% figure('Position',[80 80 800 400]);
figure('Position',[200 100 800 750]); hold on; box on;
subplot(4,1,2);
hold on; box on;
plot(t', h_value, 'k', 'DisplayName', 'CBF $h(x, y)$');
xlabel('$t \ [s]$');
% xlim([min(x_p), max(x_p)])
ylabel('$h(t)$');
% title('$h(x)$');
%grid on;
legend;
% hold off;


% plot k_des and k_safe
% figure('Position',[80 80 800 400]);
subplot(4,1,3); hold on; box on;
plot(t', vx_d, 'k', 'DisplayName', '$k_{nom}$');
plot(t', v_r, 'b', 'DisplayName', '$k_{QP}$');
xlabel('$t \ [s]$');
% xlim([min(x_p), max(x_p)])
ylabel('$v \ [m/s]$');
% title('$h(x)$');
%grid on;
legend;
% hold off;

subplot(4,1,4); hold on; box on;
plot(t', w_d, 'k', 'DisplayName', '$k_{nom}$');
plot(t', w_r, 'b', 'DisplayName', '$k_{QP}$');
xlabel('$t \ [s]$');
% xlim([min(x_p), max(x_p)])
ylabel('$\omega \ [rad/s]$');
% title('$h(x)$');
%grid on;
legend;

% safety
figure('Position',[200 100 800 750]); hold on; box on;

% uncertainty region
upper_bound = y_p + sqrt(var_y);
lower_bound = y_p - sqrt(var_y);

% safe region based on the CBF (d = 0.5)
x_safe = linspace(min(x_p)-0.0, max(x_p)+0.0, 500);
y_safe_upper = 0 * sin(c * x_safe + b) + a + 1;
y_safe_lower = 0 * sin(c * x_safe + b) + a - 1;

% safe region (shaded area)
fill([x_safe, fliplr(x_safe)], [y_safe_upper, fliplr(y_safe_lower)],...
     [0.8, 1.0, 0.8], 'EdgeColor', 'none', 'DisplayName', 'safe set');

% safe boundary lines (d = 1)
y_safe_upper_d1 = 0 * sin(c * x_safe + b) + a + 1;
y_safe_lower_d1 = 0 * sin(c * x_safe + b) + a - 1;
plot(x_safe, y_safe_upper_d1, '--r', 'LineWidth', 1.5, 'DisplayName','safe boundary d=1');
plot(x_safe, y_safe_lower_d1, '--r', 'LineWidth', 1.5, 'HandleVisibility','off');

% uncertainty region
fill([x_p; flipud(x_p)], [upper_bound; flipud(lower_bound)],...
     [0.7 0.7 0.7], 'EdgeColor','none','DisplayName','uncertainty');

%breference path from simulation
x_ref_vals = linspace(min(x_p), max(x_p), 500);
y_ref_vals = 1.5 * sin(c * x_ref_vals);
plot(x_ref_vals, y_ref_vals, 'k--', 'LineWidth',1.5, 'DisplayName','reference path');

% robot trajectory
plot(x_p, y_p, 'b', 'LineWidth', 2, 'DisplayName', 'robot path');

% safety function
text(mean(x_safe)+1.2, max(y_safe_upper_d1)-0.3,'$h(x,y) = d^2 - y^2$',...
    'Interpreter','latex','FontSize',14,'HorizontalAlignment','center');

xlabel('$x_p \ [m]$');
ylabel('$y_p \ [m]$');
box on;
legend('Location','northoutside','Orientation','horizontal','NumColumns',3);
axis equal;
hold off;